segmentation Fault ( core dumped) error의 원인은 주로
1. 프로그램이 허용되지 않은 메모리 영역에 접근 시도
2. 허용되지 않은 방법으로 메모리 영역에 접근을 시도
이중에서도 코드상에 가장 연관되어 있는 부분이 포인터이다.
C++에서 segfault가 발생하는 상황은 다음과 같다.
1. null 값을 가리키는 포인터에 접근하는 경우
int* myptr = NULL;
*myptr = 3;
2. read-only로 표시된 메모리 영역에 쓰려고 할때
char* myptr = "hello world";
*myptr = 'h';
3. 더 이상 존재하지 않는 메모리 영역을 가리킬 때
char* myptr = NULL;
{
    char c = '1';
    myptr = &c;
}
*myptr = 'S';
myptr은 중괄호와 함꼐 존재하지 않게 되었는데 접근했으므로 segfault 발생

********************************************

우선순위 큐를 내림차순으로 나오게 하고 싶다면 greater를 써라
piority_queue<int, vector<int>, greater<int>> scovilleQueue(scoville.begin(), scoville.end());

********************************************

이터레이터 선언
vector<int>::iterator it;

*********************************************

    do{

    }while(next_permutation(v.begin(),v.end()));

이런식으로 모든 순회가 가능하다

vector에서 중복제거를 해주려면 erase와 unique와 sort를 적절히 사용해주면 된다.
먼저 정렬을해주고
    sort(v.begin(),v.end());
    unique(v.begin(),v.end());를 하면 중복되는 값들은 맨뒤로 쓰레기값이 되어 밀려진다.
그리고 쓰레기값이 시작되는 인덱스의 iterator를 리턴하기 때문에
    ans.erase(unique(ans.begin(),ans.end()),ans.end());
이렇게 사용하면 된다.

*************************************************

탐욕법란 트리구조로 선택할 길이 있을때 그때그때 더 큰값으로 넘어가는 알고리즘이다.
무조건 최적의 값이 나온다는 보장은 없지만 확률이 괜찮아서 자주 쓰이는 알고리즘

*************************************************

최소신장트리 : 따라서 Spanning Tree는 그래프에 있는 n개의 정점을 정확히 (n-1)개의 간선으로 연결 한다.
MST = Minimum Spanning Tree = 최소 신장 트리
MST의 구현 방법
1. Kruskal MST 알고리즘
탐욕적인 방법(greedy method) 을 이용하여 네트워크(가중치를 간선에 할당한 그래프)의 모든 정점을 최소 비용으로 연결하는 최적 해답을 구하는 것

MST(최소 비용 신장 트리) 가 1) 최소 비용의 간선으로 구성됨 2) 사이클을 포함하지 않음 의 조건에 근거하여 각 단계에서 사이클을 이루지 않는 최소 비용 간선을 선택 한다.
간선 선택을 기반으로 하는 알고리즘이다.
이전 단계에서 만들어진 신장 트리와는 상관없이 무조건 최소 간선만을 선택하는 방법이다.
[과정]

그래프의 간선들을 가중치의 오름차순으로 정렬한다.
정렬된 간선 리스트에서 순서대로 사이클을 형성하지 않는 간선을 선택한다.
즉, 가장 낮은 가중치를 먼저 선택한다.
사이클을 형성하는 간선을 제외한다.
해당 간선을 현재의 MST(최소 비용 신장 트리)의 집합에 추가한다.
참고 구체적인 내용은 Kruskal MST 알고리즘이란 참고

2. Prim MST 알고리즘
시작 정점에서부터 출발하여 신장트리 집합을 단계적으로 확장 해나가는 방법

정점 선택을 기반으로 하는 알고리즘이다.
이전 단계에서 만들어진 신장 트리를 확장하는 방법이다.
[과정]

시작 단계에서는 시작 정점만이 MST(최소 비용 신장 트리) 집합에 포함된다.
앞 단계에서 만들어진 MST 집합에 인접한 정점들 중에서 최소 간선으로 연결된 정점을 선택하여 트리를 확장한다.
즉, 가장 낮은 가중치를 먼저 선택한다.
위의 과정을 트리가 (N-1)개의 간선을 가질 때까지 반복한다.
참고 구체적인 내용은 Prim MST 알고리즘이란 참고
