"""
n명을 대상으로 송금 로그를 분석
"""
import time
import datetime
from collections import defaultdict

def solution(n: int, logs: list):
    answer = []
    converted_logs = []
    for log in logs:
        user_id, target_user_id, amount, _time = log.split(',')
        _time = int(time.mktime(datetime.datetime.strptime(_time, "%Y-%m-%d %H:%M:%S").timetuple()))
        converted_logs.append((int(user_id), int(target_user_id), int(amount), _time))

    converted_logs.sort(key=lambda x: (x[1], x[3]))
    # for log in converted_logs:
    #     print(log)
    graph = defaultdict(list)
    for i in range(len(converted_logs) - 1):
        if converted_logs[i][1] == converted_logs[i + 1][1] \
            and converted_logs[i][2] == converted_logs[i + 1][2] \
            and converted_logs[i][3] - converted_logs[i][3] <= 600:
            graph[converted_logs[i][0]].append(converted_logs[i + 1][0])
            graph[converted_logs[i + 1][0]].append(converted_logs[i][0])

    for i in range(n):
        cnt = 0
        for neighbor in graph[i]:
            cnt += 1
            for neighbor_neighbor in graph[neighbor]:
                cnt += 1

        answer.append(cnt)


    return answer

if __name__ == '__main__':
    n, logs = 6, ["3,0,39222100,2020-11-04 02:19:50", "1,0,70403000,2020-12-07 21:41:39", "2,5,89249000,2020-11-15 19:38:21", "0,2,48748300,2021-05-19 14:54:51", "0,5,96059000,2021-05-09 06:40:17", "0,2,16230300,2020-12-13 01:45:17", "3,0,70403000,2020-12-07 21:46:55", "4,5,89249000,2020-11-15 19:45:42", "5,0,72710000,2020-08-08 05:43:18", "4,1,8453500,2020-08-30 20:40:39", "2,5,37973900,2021-06-27 11:40:01", "3,2,71630300,2020-07-19 18:18:49", "5,4,96161000,2020-10-04 07:57:43", "2,3,8796100,2020-08-12 21:28:13", "2,1,71412600,2020-10-24 23:16:07", "4,2,81714500,2021-03-29 17:57:30", "2,0,72710000,2020-08-08 05:34:15", "0,1,92909400,2021-03-05 22:06:42", "4,3,18586200,2020-10-10 04:39:27", "3,5,96059000,2021-05-09 06:47:36", "3,4,96161000,2020-10-04 07:57:21", "5,1,54854500,2020-12-15 05:50:39"]
    print(solution(n, logs))

    n, logs = 5, ["3,4,74573100,2021-04-02 23:41:37", "1,4,80768000,2021-04-13 15:51:45", "3,2,23679000,2020-12-16 19:16:06",
        "4,3,65010100,2020-09-13 20:01:01", "2,4,58229000,2020-07-26 10:35:29", "1,3,44968200,2021-03-18 07:59:23",
        "3,2,24822900,2021-03-06 17:34:00", "0,2,27796400,2021-02-28 01:56:18", "2,0,56577500,2021-03-10 12:35:30",
        "0,2,23679000,2020-12-16 19:13:19", "4,3,89586000,2020-08-08 09:58:28", "3,2,5421000,2020-08-13 23:19:04",
        "1,2,5421000,2020-08-13 23:12:26", "2,1,88509400,2021-04-23 21:09:44", "2,3,89586000,2020-08-08 09:50:06",
        "2,1,36867000,2020-09-22 07:21:18", "2,4,33405800,2021-02-12 16:55:55"]
    print(solution(n, logs))
    n, logs = 5, ["0,2,10437600,2021-03-17 01:35:25", "0,2,92118100,2021-04-25 06:30:18", "1,2,93704700,2021-03-24 09:06:21", "4,3,44352000,2020-09-27 03:46:52", "4,2,64479000,2020-08-03 13:04:45", "2,3,44352000,2020-09-27 03:46:17", "1,3,65711000,2021-04-05 18:46:26", "0,4,34356000,2021-02-25 21:44:33", "3,2,64479000,2020-08-03 13:00:16", "2,1,10497300,2021-04-02 06:30:26", "3,4,45643000,2021-01-06 09:38:36", "2,4,34356000,2021-02-25 21:48:05", "2,3,65711000,2021-04-05 18:49:09", "0,1,85618600,2020-10-11 04:35:50", "4,3,79609200,2021-06-16 06:52:53", "0,4,92979000,2021-02-08 19:56:37", "4,1,78004200,2021-01-12 08:28:39"]
    print(solution(n, logs))


